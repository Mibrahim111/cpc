#include <vector>
#include <queue>
#include <cassert>
#include <iostream>

using std::vector;
using std::queue;
using std::string;

class Solution {
    int dx[8] = { 1,-1,0,0 };
    int dy[8] = { 0,0,-1,1 };
    bool isValid(const vector<vector<int>> &mat, int x, int y) {
        return x >= 0 && y >= 0 && x < (int)mat.size() && y < (int)mat[0].size();
    }

    void BFS(vector<vector<int>>& rooms, queue<std::pair<int, int>>& q , vector<vector<bool>>& vis) {

        for (int level = 0, sz = (int)q.size(); !q.empty(); level++, sz = (int)q.size()) {
            while (sz--) {
                int x = q.front().first, y = q.front().second;
                q.pop();

                for (int i = 0; i < 4; i++) {
                    int xc = x + dx[i],
                        yc = y + dy[i];
                    if (!isValid(rooms, xc, yc) || vis[xc][yc])
                        continue;

                    if (rooms[xc][yc] == INT_MAX)
                    {
                        rooms[xc][yc] = level + 1;
                        q.push({ xc,yc });
                        vis[xc][yc] = 1;
                    }
                }
            }
        }
             
        
    }

public:

    void wallsAndGates(vector<vector<int>>& rooms) {
        int n = (int)rooms.size(),
            m = (int)rooms[0].size();
        queue<std::pair<int, int>> q;
        vector<vector<bool>> vis(n, vector<bool>(m, 0));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++)
            {
                if (rooms[i][j] == 0)
                    q.push({ i,j });
            }
        }
            BFS(rooms, q,vis);
        }
    };
