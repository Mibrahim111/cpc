#include <vector>
#include <iostream>
#include <queue>
#include <cassert>

using namespace std;

class Solution {
    // 0 -> red , 1 -> blue
    const int red = 0;
    const int blue = 1;

    vector<vector<pair<int, int>>> build_graph(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        vector<vector<pair<int, int>>> graph(n);

        for (const auto& edge : redEdges) {
            graph[edge[0]].emplace_back(edge[1], red);
        }

        for (const auto& edge : blueEdges) {
            graph[edge[0]].emplace_back(edge[1], blue);
        }

        return graph;
    }

    vector<int> BFS(const vector<vector<pair<int, int>>>& graph, int start) {
        int n = graph.size();
        queue<pair<int, int>> q;
        vector<vector<int>> visited(n, vector<int>(2, -1)); // visited[node][color]

        q.push({ start, -1 });
        visited[start][0] = 0;
        visited[start][1] = 0;

        while (!q.empty()) {
            auto current = q.front();
            q.pop();
            int node = current.first;
            int prevColor = current.second;

            for (const auto& neighbor : graph[node]) {
                int nextNode = neighbor.first;
                int nextColor = neighbor.second;

                if (nextColor != prevColor && visited[nextNode][nextColor] == -1) {
                    visited[nextNode][nextColor] = visited[node][prevColor == -1 ? 0 : prevColor] + 1;
                    q.push({ nextNode, nextColor });
                }
            }
        }

        vector<int> result(n);
        for (int i = 0; i < n; ++i) {
            if (visited[i][0] == -1 && visited[i][1] == -1) {
                result[i] = -1;
            }
            else if (visited[i][0] == -1) {
                result[i] = visited[i][1];
            }
            else if (visited[i][1] == -1) {
                result[i] = visited[i][0];
            }
            else {
                result[i] = min(visited[i][0], visited[i][1]);
            }
        }

        return result;
    }

public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        auto graph = build_graph(n, redEdges, blueEdges);
        return BFS(graph, 0);
    }
};

void testShortestAlternatingPaths() {
    Solution sol;

    // Test case 1
    int n1 = 3;
    vector<vector<int>> redEdges1 = { {0, 1}, {1, 2} };
    vector<vector<int>> blueEdges1 = { };
    vector<int> expected1 = { 0, 1, 2 };
    assert(sol.shortestAlternatingPaths(n1, redEdges1, blueEdges1) == expected1);

    // Test case 2
    int n2 = 3;
    vector<vector<int>> redEdges2 = { {0, 1} };
    vector<vector<int>> blueEdges2 = { {2, 1} };
    vector<int> expected2 = { 0, 1, -1 };
    assert(sol.shortestAlternatingPaths(n2, redEdges2, blueEdges2) == expected2);

    // Test case 3
    int n3 = 3;
    vector<vector<int>> redEdges3 = { {0, 1}, {0, 2} };
    vector<vector<int>> blueEdges3 = { {1, 0} };
    vector<int> expected3 = { 0, 1, 1 };
    assert(sol.shortestAlternatingPaths(n3, redEdges3, blueEdges3) == expected3);

    // Test case 4
    int n4 = 5;
    vector<vector<int>> redEdges4 = { {0, 1}, {1, 2}, {2, 3}, {3, 4} };
    vector<vector<int>> blueEdges4 = { {1, 2}, {2, 3}, {3, 1} };
    vector<int> expected4 = { 0, 1, 2, 3, 4 };
    assert(sol.shortestAlternatingPaths(n4, redEdges4, blueEdges4) == expected4);

    // Test case 5
    int n5 = 3;
    vector<vector<int>> redEdges5 = { {0, 1}, {1, 2} };
    vector<vector<int>> blueEdges5 = { {2, 1} };
    vector<int> expected5 = { 0, 1, 2 };
    assert(sol.shortestAlternatingPaths(n5, redEdges5, blueEdges5) == expected5);

    std::cout << "All test cases passed!" << std::endl;
}

int main() {
    testShortestAlternatingPaths();
    return 0;
}
